// Project Progress Plugin - Main functionality

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞)
window.projectProgressSettings = {
    js_init_delay: 1000,
    js_retry_interval: 500,
    js_max_retry_time: 10000,
    js_animation_duration: 300
};

function initializeProjectProgress() {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    addProgressToggle();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
    addExportButton();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    const success = 
        initializeTableView() || 
        initializePanelView() || 
        initializeCardView() ||
        initializeAlternativeSearch();
    
    return success;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
function addExportButton() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
    if (document.querySelector('.project-progress-export-button')) {
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportButton = document.createElement('div');
    exportButton.className = 'project-progress-export-button';
    exportButton.style.cssText = 'margin: 20px 0; padding: 15px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);';
    
    exportButton.innerHTML = `
        <h3 style="margin: 0 0 10px 0; color: #333; font-size: 16px;">üìä –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º</h3>
        <p style="margin: 0 0 15px 0; color: #666; font-size: 14px;">
          –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ CSV —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        </p>
        <a href="/project_progress_export.csv" class="icon icon-download" 
           style="display: inline-block; padding: 10px 20px; background: #4CAF50; color: white; text-decoration: none; border-radius: 4px; font-weight: bold; font-size: 14px; transition: background-color 0.3s ease;"
           onmouseover="this.style.backgroundColor='#45a049'" 
           onmouseout="this.style.backgroundColor='#4CAF50'">
          üì• –°–∫–∞—á–∞—Ç—å CSV —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        </a>
    `;
    
    // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ - –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const content = document.querySelector('#content, .main, .content, main');
    if (content) {
        // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ –ø–∞–Ω–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤
        const projectsTable = content.querySelector('table.list.projects');
        const projectsPanel = content.querySelector('.projects');
        
        if (projectsTable) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ—ë
            projectsTable.parentNode.insertBefore(exportButton, projectsTable.nextSibling);
            console.log('Project Progress: Export button added after projects table');
        } else if (projectsPanel) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞–Ω–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ—ë
            projectsPanel.parentNode.insertBefore(exportButton, projectsPanel.nextSibling);
            console.log('Project Progress: Export button added after projects panel');
        } else {
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content.appendChild(exportButton);
            console.log('Project Progress: Export button added to end of content');
        }
    } else {
        console.log('Project Progress: No suitable container found for export button');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function addProgressToggle() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
    if (document.querySelector('.project-progress-toggle')) {
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
    const toggleContainer = document.createElement('div');
    toggleContainer.className = 'project-progress-toggle';
    toggleContainer.style.cssText = 'margin: 10px 0; padding: 15px; background: #e8f4fd; border: 1px solid #b3d9ff; border-radius: 6px; display: flex; align-items: center; gap: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);';
    
    toggleContainer.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px;">
            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer; font-weight: bold; color: #333; font-size: 14px;">
                <input type="checkbox" id="progressToggle" checked style="transform: scale(1.3); cursor: pointer;">
                <span>üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–æ–≤</span>
            </label>
        </div>
        <div style="font-size: 13px; color: #666; flex: 1;">
            –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        </div>
    `;
    
    // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è - –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const content = document.querySelector('#content, .main, .content, main');
    if (content) {
        // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const pageTitle = content.querySelector('h2, .page-title, .main-title, h1');
        if (pageTitle) {
            pageTitle.parentNode.insertBefore(toggleContainer, pageTitle.nextSibling);
            console.log('Project Progress: Toggle added after page title');
        } else {
            content.insertBefore(toggleContainer, content.firstChild);
            console.log('Project Progress: Toggle added to page top');
        }
    } else {
        console.log('Project Progress: No suitable container found for toggle');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
    const toggle = document.getElementById('progressToggle');
    if (toggle) {
        toggle.addEventListener('change', function() {
            toggleProgressDisplay(this.checked);
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
        restoreProgressToggleState();
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function toggleProgressDisplay(show) {
    const progressElements = document.querySelectorAll('.project-progress-bar, .project-progress-text, .project-progress-container, .project-progress-panel, .project-progress-card, .progress-cell');
    
    progressElements.forEach(element => {
        if (show) {
            element.style.display = '';
            element.style.visibility = 'visible';
            element.style.opacity = '1';
            
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if (element.innerHTML.includes('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞') || element.innerHTML.includes('–∑–∞–≥—Ä—É–∑–∫–∞...') || element.innerHTML.includes('–ó–∞–≥—Ä—É–∑–∫–∞...')) {
                const projectId = extractProjectIdFromElement(element);
                if (projectId) {
                    loadProjectProgress(projectId, element, getViewTypeFromElement(element));
                }
            }
        } else {
            element.style.display = 'none';
            element.style.visibility = 'hidden';
            element.style.opacity = '0';
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
    localStorage.setItem('projectProgressVisible', show);
    
    console.log(`Project Progress: Display ${show ? 'enabled' : 'disabled'}`);
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
function restoreProgressToggleState() {
    const savedState = localStorage.getItem('projectProgressVisible');
    const toggle = document.getElementById('progressToggle');
    
    if (toggle) {
        if (savedState !== null) {
            toggle.checked = savedState === 'true';
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω
            toggle.checked = true;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
        toggleProgressDisplay(toggle.checked);
        
        // –¢–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        const existingElements = document.querySelectorAll('.project-progress-bar, .project-progress-text, .project-progress-container, .project-progress-panel, .project-progress-card, .progress-cell');
        existingElements.forEach(element => {
            if (!toggle.checked) {
                element.style.display = 'none';
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
function initializeTableView() {
    const table = document.querySelector('table.list.projects');
    if (!table) {
        return false;
    }
    
    addProgressColumnToTable(table);
    return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–∞–Ω–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (ul/li)
function initializePanelView() {
    // –ò—â–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ø–∞–Ω–µ–ª—å–Ω–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
    const projectLists = document.querySelectorAll('ul.projects.root');    
    let foundProjects = false;
    
    projectLists.forEach(list => {
        const projectItems = list.querySelectorAll('li');
        if (projectItems.length > 0) {
            addProgressToPanelView(list, projectItems);
            foundProjects = true;
        }
    });
    
    return foundProjects;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–ª–∏—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
function initializeCardView() {
    const projectGrid = document.querySelector('div.projects.grid, .grid.projects, .project-cards');
    if (!projectGrid) {
        return false;
    }
    
    addProgressToCardView(projectGrid);
    return true;
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
function initializeAlternativeSearch() {
    // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
    const projectLinks = document.querySelectorAll('a[href*="/projects/"]');
    const processedProjects = new Set();
    
    let foundCount = 0;
    
    projectLinks.forEach(link => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (link.href.includes('/projects/new') || 
            link.href.includes('/projects/create') ||
            link.href.includes('/projects/edit') ||
            link.href.includes('/projects/settings')) {
            return;
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        if (isInNavigationOrHeader(link)) {
            return;
        }
        
        const projectId = extractProjectId(link.href);
        if (!projectId || processedProjects.has(projectId)) {
            return;
        }
        
        processedProjects.add(projectId);
        
        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        const container = findProjectContainer(link);
        if (!container || container.querySelector('.project-progress-container')) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (!isSuitableContainerForProgress(container)) {
            return;
        }
        
        addProgressToContainer(container, projectId);
        foundCount++;
    });
    
    return foundCount > 0;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
function addProgressColumnToTable(table) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (!addProgressHeaderToTable(table)) {
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    addProgressCellsToTable(table);
}

function addProgressHeaderToTable(table) {
    const headerRow = table.querySelector('thead tr');
    if (!headerRow) {
        return false;
    }
    
    if (headerRow.querySelector('.progress-column-header')) {
        return false;
    }
    
    const header = document.createElement('th');
    header.className = 'progress-column-header';
    header.textContent = '–ü—Ä–æ–≥—Ä–µ—Å—Å';
    header.style.cssText = 'width: 180px; text-align: center; vertical-align: middle; font-weight: bold; background: #f8f8f8; padding: 8px;';
    
    headerRow.appendChild(header);
    return true;
}

function addProgressCellsToTable(table) {
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach((row, index) => {
        setTimeout(() => {
            addProgressCellToTableRow(row);
        }, index * (window.projectProgressSettings.js_animation_duration || 100));
    });
}

function addProgressCellToTableRow(row) {
    if (row.querySelector('.progress-cell')) {
        return;
    }
    
    const projectLink = row.querySelector('td.name a, a[href*="/projects/"]');
    if (!projectLink) return;
    
    const projectId = extractProjectId(projectLink.href);
    if (!projectId) return;
    
    const cell = document.createElement('td');
    cell.className = 'progress-cell';
    cell.style.cssText = 'text-align: center; vertical-align: middle; padding: 8px;';
    cell.innerHTML = '<div style="color: #999; font-style: italic; font-size: 12px;">–∑–∞–≥—Ä—É–∑–∫–∞...</div>';
    
    row.appendChild(cell);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    const toggle = document.getElementById('progressToggle');
    if (toggle && !toggle.checked) {
        cell.style.display = 'none';
        return;
    }
    
    loadProjectProgress(projectId, cell, 'table');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø–∞–Ω–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (ul/li)
function addProgressToPanelView(list, projectItems) {
    
    projectItems.forEach((projectItem, index) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        if (!isProjectListItem(projectItem)) {
            return;
        }
        
        setTimeout(() => {
            addProgressToPanelProject(projectItem);
        }, index * (window.projectProgressSettings.js_animation_duration || 100));
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç li –ø—Ä–æ–µ–∫—Ç–æ–º
function isProjectListItem(listItem) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º
    const className = listItem.className || '';
    if (className.includes('project') || className.includes('issue') || className.includes('entity')) {
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
    const projectLink = listItem.querySelector('a[href*="/projects/"]');
    if (projectLink && !projectLink.href.includes('/projects/new')) {
        return true;
    }
    
    return false;
}

function addProgressToPanelProject(projectItem) {
    if (projectItem.querySelector('.project-progress-container')) {
        return;
    }
    
    const projectLink = projectItem.querySelector('a[href*="/projects/"]');
    if (!projectLink) {
        return;
    }
    
    const projectId = extractProjectId(projectLink.href);
    if (!projectId) {
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressContainer = document.createElement('div');
    progressContainer.className = 'project-progress-panel';
    progressContainer.style.cssText = 'margin: 8px 0; padding: 10px; background: #f9f9f9; border-radius: 4px; border: 1px solid #eee;';
    progressContainer.innerHTML = '<div style="color: #999; font-style: italic; font-size: 12px;">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...</div>';
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤ –∫–æ–Ω–µ—Ü —ç–ª–µ–º–µ–Ω—Ç–∞
    projectItem.appendChild(progressContainer);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    const toggle = document.getElementById('progressToggle');
    if (toggle && !toggle.checked) {
        progressContainer.style.display = 'none';
        return;
    }
    
    loadProjectProgress(projectId, progressContainer, 'panel');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø–ª–∏—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
function addProgressToCardView(projectGrid) {
    const projectCards = projectGrid.querySelectorAll('div.project-card, article.project, .project, div[class*="card"]');
    if (projectCards.length === 0) {
        return;
    }
    
    
    projectCards.forEach((projectCard, index) => {
        setTimeout(() => {
            addProgressToCardProject(projectCard);
        }, index * (window.projectProgressSettings.js_animation_duration || 100));
    });
}

function addProgressToCardProject(projectCard) {
    if (projectCard.querySelector('.project-progress-container')) {
        return;
    }
    
    const projectLink = projectCard.querySelector('h3 a, h2 a, .name a, a[href*="/projects/"]');
    if (!projectLink) return;
    
    const projectId = extractProjectId(projectLink.href);
    if (!projectId) return;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressContainer = document.createElement('div');
    progressContainer.className = 'project-progress-card';
    progressContainer.style.cssText = 'margin: 10px 0; padding: 8px; background: rgba(0,0,0,0.03); border-radius: 3px; text-align: center;';
    progressContainer.innerHTML = '<div style="color: #999; font-size: 12px;">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç–æ—á–∫—É
    projectCard.appendChild(progressContainer);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    const toggle = document.getElementById('progressToggle');
    if (toggle && !toggle.checked) {
        progressContainer.style.display = 'none';
        return;
    }
    
    loadProjectProgress(projectId, progressContainer, 'card');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
function isInNavigationOrHeader(link) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    const navigationSelectors = [
        'nav', 'header', '.header', '.navigation', '.nav',
        '.breadcrumb', '.breadcrumbs', '.menu', '.sidebar',
        '.top-menu', '.main-menu', '.user-menu',
        '.contextual', '.context-menu'
    ];
    
    for (const selector of navigationSelectors) {
        if (link.closest(selector)) {
            return true;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageHeader = link.closest('h1, h2, h3, h4, h5, h6');
    if (pageHeader) {
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
    const searchArea = link.closest('.search, .search-box, .search-form, .search-container');
    if (searchArea) {
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—ã—à–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
    const mainContent = document.querySelector('#content, .main, .content, main');
    if (mainContent && link.getBoundingClientRect().top < mainContent.getBoundingClientRect().top) {
        return true;
    }
    
    return false;
}

function isSuitableContainerForProgress(container) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const unsuitableSelectors = [
        'nav', 'header', '.header', '.navigation', '.nav',
        '.breadcrumb', '.breadcrumbs', '.menu', '.sidebar',
        '.top-menu', '.main-menu', '.user-menu',
        '.contextual', '.context-menu', '.search'
    ];
    
    for (const selector of unsuitableSelectors) {
        if (container.closest(selector)) {
            return false;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π
    const rect = container.getBoundingClientRect();
    if (rect.width < 200 || rect.height < 50) {
        return false;
    }
    
    return true;
}

function findProjectContainer(link) {
    // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –ø–æ DOM —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
    let container = link.closest('li, div.project, tr, article, .entity, .item');
    
    if (!container) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
        container = link.parentElement;
    }
    
    return container;
}

function addProgressToContainer(container, projectId) {
    const progressContainer = document.createElement('div');
    progressContainer.className = 'project-progress-container';
    progressContainer.style.cssText = 'margin: 8px 0; padding: 10px; background: #f9f9f9; border-radius: 4px; border: 1px solid #eee;';
    progressContainer.innerHTML = '<div style="color: #999; font-style: italic; font-size: 12px;">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...</div>';
    
    container.appendChild(progressContainer);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    const toggle = document.getElementById('progressToggle');
    if (toggle && !toggle.checked) {
        progressContainer.style.display = 'none';
        return;
    }
    
    loadProjectProgress(projectId, progressContainer, 'auto');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadProjectProgress(projectId, container, viewType) {
    
    fetch(`/projects/${projectId}/project_progress`, {
        headers: {
            'Accept': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
        return response.json();
    })
    .then(data => {
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('Project Progress: API Response for project', projectId, ':', data);
        updateProgressDisplay(container, data, viewType);
    })
    .catch(error => {
        console.error('Project Progress: Error loading progress:', error);
        showProgressError(container, viewType);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
function updateProgressDisplay(container, data, viewType) {
    console.log('Project Progress: updateProgressDisplay called with:', { data, viewType });
    
    if (!data || typeof data.progress_percentage === 'undefined') {
        console.log('Project Progress: Invalid data or missing progress_percentage:', data);
        showProgressError(container, viewType);
        return;
    }
    
    const percent = data.progress_percentage;
    const closed = data.closed_issues || 0;
    const total = data.total_issues || 0;
    const color = getProgressColor(percent);
    
    console.log('Project Progress: Display values:', { percent, closed, total, color });
    
    switch (viewType) {
        case 'table':
            updateTableView(container, percent, closed, total, color);
            break;
        case 'panel':
            updatePanelView(container, percent, closed, total, color);
            break;
        case 'card':
            updateCardView(container, percent, closed, total, color);
            break;
        default:
            updateAutoView(container, percent, closed, total, color);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const toggle = document.getElementById('progressToggle');
    if (toggle && !toggle.checked) {
        toggleProgressDisplay(false);
    }
}

function updateTableView(container, percent, closed, total, color) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ (table.list.projects)
    const isProjectList = container.closest('table.list.projects');
    
    if (isProjectList) {
        // –î–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        updateProjectListNumbers(container, percent, closed, total, color);
    } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        container.innerHTML = `
            <div title="${percent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${closed}/${total} –∑–∞–¥–∞—á)" style="display: inline-block; text-align: center;">
                <div style="width: 100px; height: 12px; background: #f0f0f0; border: 1px solid #ddd; border-radius: 6px; margin: 0 auto; overflow: hidden;">
                    <div style="width: ${percent}%; height: 100%; background: ${color}; transition: width 0.3s ease;"></div>
                </div>
                <div style="margin-top: 5px; font-size: 11px; line-height: 1.3;">
                    <div style="font-weight: bold; color: #333;">${percent}%</div>
                    <div style="color: #666;">${closed}/${total}</div>
                </div>
            </div>
        `;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
function updateProjectListNumbers(container, percent, closed, total, color) {
    container.innerHTML = `
        <div title="${percent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ (${closed}/${total} –∑–∞–¥–∞—á)" style="text-align: center; padding: 5px;">
            <div style="font-size: 14px; font-weight: bold; color: ${color};">
                ${percent}%
            </div>
        </div>
    `;
}

function updatePanelView(container, percent, closed, total, color) {
    container.innerHTML = `
        <div class="project-progress-panel-content" style="display: flex; align-items: center; gap: 12px;">
            <div style="flex: 1;">
                <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 5px;">
                    <div style="width: 100px; height: 12px; background: #f0f0f0; border-radius: 6px; overflow: hidden;">
                        <div style="width: ${percent}%; height: 100%; background: ${color};"></div>
                    </div>
                    <span style="font-weight: bold; color: #333; font-size: 13px;">${percent}%</span>
                </div>
                <div style="color: #666; font-size: 12px;">
                    ${closed} –∏–∑ ${total} –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                </div>
            </div>
        </div>
    `;
}

function updateCardView(container, percent, closed, total, color) {
    container.innerHTML = `
        <div class="project-progress-card-content" style="text-align: center;">
            <div style="font-size: 11px; color: #666; margin-bottom: 4px;">–ü—Ä–æ–≥—Ä–µ—Å—Å</div>
            <div style="width: 80px; height: 10px; background: #f0f0f0; border-radius: 5px; margin: 0 auto; overflow: hidden;">
                <div style="width: ${percent}%; height: 100%; background: ${color};"></div>
            </div>
            <div style="margin-top: 4px; font-size: 11px;">
                <span style="font-weight: bold; color: #333;">${percent}%</span>
                <span style="color: #666;"> (${closed}/${total})</span>
            </div>
        </div>
    `;
}

function updateAutoView(container, percent, closed, total, color) {
    container.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px; flex-wrap: wrap;">
            <div style="flex: 1;">
                <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 4px;">
                    <div style="width: 80px; height: 10px; background: #f0f0f0; border-radius: 5px; overflow: hidden;">
                        <div style="width: ${percent}%; height: 100%; background: ${color};"></div>
                    </div>
                    <span style="font-weight: bold; color: #333; font-size: 12px;">${percent}%</span>
                </div>
                <div style="color: #666; font-size: 11px;">
                    ${closed}/${total} –∑–∞–¥–∞—á
                </div>
            </div>
        </div>
    `;
}

function showProgressError(container, viewType) {
    const message = viewType === 'table' ? 
        '<div style="color: #999; font-style: italic; font-size: 12px;">–æ—à–∏–±–∫–∞</div>' :
        '<div style="color: #999; font-style: italic; font-size: 12px; text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
    
    container.innerHTML = message;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function extractProjectId(url) {
    try {
        const match = url.match(/projects\/([^\/\?]+)/);
        return match ? match[1] : null;
    } catch (error) {
        return null;
    }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ projectId –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function extractProjectIdFromElement(element) {
    // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const projectLink = element.closest('tr, li, div.project, article, .entity, .item')?.querySelector('a[href*="/projects/"]');
    if (projectLink) {
        return extractProjectId(projectLink.href);
    }
    
    // –ò—â–µ–º –≤ —Å–∞–º–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
    const linkInElement = element.querySelector('a[href*="/projects/"]');
    if (linkInElement) {
        return extractProjectId(linkInElement.href);
    }
    
    return null;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
function getViewTypeFromElement(element) {
    if (element.classList.contains('progress-cell')) {
        return 'table';
    } else if (element.classList.contains('project-progress-panel')) {
        return 'panel';
    } else if (element.classList.contains('project-progress-card')) {
        return 'card';
    } else if (element.classList.contains('project-progress-container')) {
        return 'auto';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if (element.closest('table.list.projects')) {
        return 'table';
    } else if (element.closest('ul.projects')) {
        return 'panel';
    } else if (element.closest('.grid, .project-cards')) {
        return 'card';
    }
    
    return 'auto';
}

function getProgressColor(percent) {
    if (percent === 0) return '#f0f0f0';
    if (percent <= 20) return '#ff6b6b';
    if (percent <= 40) return '#ff9b6b';
    if (percent <= 60) return '#ffd46b';
    if (percent <= 80) return '#b8e05e';
    return '#8ec165';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
document.addEventListener('DOMContentLoaded', function() {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    setTimeout(function() {
        const success = initializeProjectProgress();
        if (!success) {
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            const retryInterval = setInterval(function() {
                if (initializeProjectProgress()) {
                    clearInterval(retryInterval);
                }
            }, window.projectProgressSettings.js_retry_interval || 500);
            
            setTimeout(() => clearInterval(retryInterval), window.projectProgressSettings.js_max_retry_time || 10000);
        }
    }, window.projectProgressSettings.js_init_delay || 1000);
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.initializeProjectProgress = initializeProjectProgress;
window.projectProgress = {
    init: initializeProjectProgress,
    reload: function() {
        initializeProjectProgress();
    },
    debug: function() {
    }
};
