class RedmineProjectProgressHooks < Redmine::Hook::ViewListener
  # –•—É–∫ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
  render_on :view_projects_show_sidebar_bottom, 
            :partial => 'project_progress/sidebar'
  
  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—á–∞ –¥–ª—è CSV —ç–∫—Å–ø–æ—Ä—Ç–∞
  def self.included(base)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –∫ ProjectsController –¥–ª—è CSV —ç–∫—Å–ø–æ—Ä—Ç–∞
    if defined?(ProjectsController)
      ProjectsController.class_eval do
        alias_method :index_without_progress_csv, :index unless method_defined?(:index_without_progress_csv)
        
        def index
          if request.format.csv? && params[:include_progress] == 'true'
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ CSV —ç–∫—Å–ø–æ—Ä—Ç
            add_progress_to_csv_export
          else
            index_without_progress_csv
          end
        end
        
        private
        
        def add_progress_to_csv_export
          # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
          @projects = Project.visible.sorted
          
          # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
          @projects.each do |project|
            begin
              progress = ProjectProgressCalculator.calculate(project)
              project.instance_variable_set(:@progress_percentage, progress[:progress_percentage])
              project.instance_variable_set(:@progress_closed_issues, progress[:closed_issues])
              project.instance_variable_set(:@progress_total_issues, progress[:total_issues])
            rescue => e
              Rails.logger.error "Project Progress CSV: Error calculating progress for project #{project.id}: #{e.message}"
              project.instance_variable_set(:@progress_percentage, 0)
              project.instance_variable_set(:@progress_closed_issues, 0)
              project.instance_variable_set(:@progress_total_issues, 0)
            end
          end
          
          # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
          index_without_progress_csv
        end
      end
    end
  end
  
  # –•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  def view_projects_index_bottom(context = {})
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    Rails.logger.info "Project Progress: view_projects_index_bottom hook called"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    begin
      export_url = Rails.application.routes.url_helpers.project_progress_export_path(format: 'csv')
      Rails.logger.info "Project Progress: Export URL generated: #{export_url}"
    rescue => e
      Rails.logger.error "Project Progress: Error generating export URL: #{e.message}"
      export_url = "/project_progress_export.csv"
    end
    
    <<~HTML
      <div style="margin: 20px 0; padding: 15px; background: #f9f9f9; border: 1px solid #ddd; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h3 style="margin: 0 0 10px 0; color: #333; font-size: 16px;">üìä –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º</h3>
        <p style="margin: 0 0 15px 0; color: #666; font-size: 14px;">
          –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ CSV —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        </p>
        <a href="#{export_url}" class="icon icon-download" 
           style="display: inline-block; padding: 10px 20px; background: #4CAF50; color: white; text-decoration: none; border-radius: 4px; font-weight: bold; font-size: 14px; transition: background-color 0.3s ease;"
           onmouseover="this.style.backgroundColor='#45a049'" 
           onmouseout="this.style.backgroundColor='#4CAF50'">
          üì• –°–∫–∞—á–∞—Ç—å CSV —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        </a>
      </div>
    HTML
  end
  
  # –•—É–∫ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
  def view_projects_index_csv(context = {})
    # –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ CSV –¥–∞–Ω–Ω—ã—Ö
    if context[:request] && context[:request].format.csv?
      <<~HTML
        <script>
          // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º CSV —ç–∫—Å–ø–æ—Ä—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          document.addEventListener('DOMContentLoaded', function() {
            if (window.location.search.includes('format=csv') && window.location.search.includes('include_progress=true')) {
              modifyCSVExport();
            }
          });
          
          function modifyCSVExport() {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const projectLinks = document.querySelectorAll('table.list.projects tbody tr td.name a');
            const projectIds = Array.from(projectLinks).map(link => {
              const match = link.href.match(/\/projects\/([^\/]+)/);
              return match ? match[1] : null;
            }).filter(id => id);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            loadProgressForCSV(projectIds);
          }
          
          function loadProgressForCSV(projectIds) {
            const progressData = {};
            let loadedCount = 0;
            
            projectIds.forEach(projectId => {
              fetch(`/projects/${projectId}/project_progress`, {
                headers: {
                  'Accept': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest'
                }
              })
              .then(response => response.json())
              .then(data => {
                progressData[projectId] = data.progress_percentage || 0;
                loadedCount++;
                
                if (loadedCount === projectIds.length) {
                  // –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º CSV
                  modifyCSVWithProgress(progressData);
                }
              })
              .catch(error => {
                console.error('Error loading progress for project', projectId, error);
                progressData[projectId] = 0;
                loadedCount++;
                
                if (loadedCount === projectIds.length) {
                  modifyCSVWithProgress(progressData);
                }
              });
            });
          }
          
          function modifyCSVWithProgress(progressData) {
            // –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ CSV —ç–∫—Å–ø–æ—Ä—Ç
            const csvLink = document.querySelector('a[href*="format=csv"]');
            if (!csvLink) return;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            const originalHref = csvLink.href;
            
            // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const url = new URL(originalHref);
            url.searchParams.set('progress_data', JSON.stringify(progressData));
            
            csvLink.href = url.toString();
          }
        </script>
      HTML
    end
  end
  
  # –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è JS –∏ CSS
  def view_layouts_base_html_head(context = {})
    tags = []
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º CSS
    tags << stylesheet_link_tag('project_progress', :plugin => 'redmine_project_progress')
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º JavaScript —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    if projects_page?(context)
      tags << javascript_include_tag('project_progress', :plugin => 'redmine_project_progress')
      
      # –î–æ–±–∞–≤–ª—è–µ–º script –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      tags << <<~HTML
        <script>
          // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JavaScript (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
          window.projectProgressSettings = {
            js_init_delay: 1000,
            js_retry_interval: 500,
            js_max_retry_time: 10000,
            js_animation_duration: 300
          };
          
          document.addEventListener('DOMContentLoaded', function() {
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ª—é–±–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
            const checkProjects = setInterval(function() {
              const hasProjects = 
                document.querySelector('table.list.projects') ||
                document.querySelector('div.projects.list') ||
                document.querySelector('div.projects.grid');
              
              if (hasProjects && typeof initializeProjectProgress === 'function') {
                clearInterval(checkProjects);
                initializeProjectProgress();
              }
            }, window.projectProgressSettings.js_retry_interval);
            
            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—è–≤—è—Ç—Å—è
            setTimeout(function() {
              clearInterval(checkProjects);
            }, window.projectProgressSettings.js_max_retry_time);
          });
        </script>
      HTML
    end
    
    tags.join("\n")
  end
  
  private
  
  def projects_page?(context)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
    controller = context[:controller]
    return false unless controller.is_a?(ProjectsController)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    request = context[:request]
    !request.path.include?('/projects/new') &&
    !request.path.include?('/projects/create') &&
    !request.path.include?('/projects/edit')
  end
  
end

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—á –¥–ª—è CSV —ç–∫—Å–ø–æ—Ä—Ç–∞
RedmineProjectProgressHooks.included(RedmineProjectProgressHooks)

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
Rails.logger.info "Project Progress: Hooks loaded successfully"